#!/usr/bin/env python3
"""
mkapp - Creates ZIPAPP package
Copyright (c) 2024 - Bart Sjerps <bart@dirty-cache.com>
License: GPLv3+
"""

import os, json, argparse
from datetime import datetime
from subprocess import run

def execute(cmd):
    r = run(cmd.split(), capture_output=True, encoding='utf-8', check=True)
    return r.stdout.strip()

gitdir   = execute('git rev-parse --show-toplevel')
packager = execute('git config --global user.name')
email    = execute('git config --global user.email')
progname = 'dbcollect'

def makebuildinfo():
    print(f"Creating buildinfo")
    buildinfo = {}
    buildinfo['builddate'] = datetime.now().strftime('%Y-%m-%d %H:%M')
    buildinfo['branch']    = execute('git branch --show-current')
    buildinfo['tag']       = execute('git describe --abbrev=0')
    buildinfo['describe']  = execute('git describe --dirty')
    buildinfo['packager']  = f'{packager} <{email.replace("@", " AT ")}>'
    buildinfo['buildhash'] = execute('git rev-parse --verify HEAD')
    buildinfo['shorthash'] = execute('git rev-parse --short HEAD')

    with open(os.path.join(gitdir, 'src/dbcollect/lib', 'buildinfo.py'), 'w') as f:
        f.write('buildinfo = ')
        json.dump(buildinfo, f, indent=2)
        f.write('\n')

def makeapp(args):
    print(f"Creating {progname}")
    srcpath = os.path.join(gitdir, 'src', progname)
    tgtpath = os.path.join(args.destdir, progname)
    r = run(['find', srcpath, '-name', '__pycache__'], capture_output=True, encoding='utf-8')
    for cachedir in r.stdout.splitlines():
        run(['/usr/bin/rm','-r', cachedir])
    print(f"Writing {tgtpath}")
    run(['python3', '-m', 'zipapp', '--output', tgtpath,  '--main', 'dbcollect:main', '--python', '/usr/bin/env python', srcpath], check=True)

def tag(args):
    r = run(['python3', '-c', 'from lib.config import versioninfo; print(versioninfo["version"])'], 
            cwd=os.path.join(gitdir, 'src/dbcollect'), capture_output=True, encoding='utf-8', check=True)
    version = r.stdout.strip()
    print(f'git tag -a -mversion v{version}')
    print('git push --tags')

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--destdir', default='/tmp')
    parser.add_argument('--tag', action="store_true")

    args = parser.parse_args()
    if args.tag:
        tag(args)
    else:
        makebuildinfo()
        makeapp(args)